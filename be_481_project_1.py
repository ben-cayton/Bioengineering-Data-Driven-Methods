# -*- coding: utf-8 -*-
"""be-481-project-1-attempt-i.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P9QNkyTxjxJQMqY15op7zFcQcJQE_jNg
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
from skimage.color import rgb2gray # converts image to grayscale 
import matplotlib.pyplot as plt # plotting 
from sklearn import linear_model, model_selection # linear ML models and
# validation models.
import os # interact with the operating system

# Store an image 
img = '../input/be-481-project-01/proj1/train/img000.png'
# Convert the image to a grayscaled and falttened array
gray_img = rgb2gray(plt.imread(img)).ravel()
# Plot the grayscaled image on a histogram
plt.hist(gray_img, bins = 255)
plt.xlabel('Pixel Intensity')
plt.ylabel('No. of Pixels')
plt.title('Histogram of Grayscale Image Pixel Intensity')
plt.show()

# Create a variable for the DataFrame 'train.csv' which has two columns:
# "Id" (the .png image file names in the training set) and "Expected" 
# (labels 0 or 1).
df_train = pd.read_csv('../input/be-481-project-01/proj1/train.csv')
# Store the pathway to the train folder, which contains the training image 
# files, in a variable.
directory_train = '../input/be-481-project-01/proj1/train'
# Create an empty array for the features with dimensions equal to the number 
# of images by the number of features being used.
x = np.zeros([df_train.shape[0],1]) 
# Create an  array containing the labels of the training images.
y = np.array(df_train["Expected"])
# Loop through the training image file names in the DatarFrame "df_train"
# in order that they are in the DataFrame. Extract the features.
for idx, filename in enumerate(df_train["Id"]):
    # Cretae a variable for the current filename.
    filenames = os.path.join(directory_train, filename)
    # Create a variable for the grayscaled, flattened image pixel array.
    gray_img = rgb2gray(plt.imread(filenames)).ravel()
    # Redefine the element of "x" corresponding to the loop index as 
    # the feature. This model will only be trained on one feature. The 
    # feature is the number of pixels in the current image with
    # intensities greater than 0.4.
    x[idx,0] = len(gray_img[gray_img > .4])
# Split off a random array of 20% of the data as the validation set.
x_train, x_val, y_train, y_val = model_selection.train_test_split(
    x, y, test_size=0.2)
# Train the model on the 80% of the data set aside for training.
reg = linear_model.LogisticRegressionCV(Cs=[1])
reg.fit(x_train, y_train)
# Print the accuracy of the predictions of the traind model on the 
# validation set
print('Test accuracy: {0}'.format(reg.score(x_val, y_val)))

# Create a variable for the DataFrame 'test.csv' which has two columns:
# "Id" (the .png image file names in the test set) and "Expected" 
# (labels 0 or 1), this time only the column containing the filenames 
# will be used.
df_test = pd.read_csv('../input/be-481-project-01/proj1/sample-submission.csv')
# Store the pathway to the test folder, which contains the test image files, 
# in a variable.
directory_test = '../input/be-481-project-01/proj1/test'
# Re-create an empty array for the features with dimensions equal to the number
# of testing images by the same number of features used to train.
x = np.zeros([df_test.shape[0],1])
# Loop through the image file names in the same way as with training. 
# Extract the features.
for idx, filename in enumerate(df_test["Id"]):
    filenames = os.path.join(directory_test, filename)
    gray_img = rgb2gray(plt.imread(filenames)).ravel()
    # Use the same feature as with training.
    x[idx,0] = len(gray_img[gray_img > 0.4])
# Store the predicted labels in an array.
pred = reg.predict(x)
# Create a DataFrame with the same format as the sample submission,
# with column headers "Id", and "Predicted" which contain the image file 
# names in the test set and their corresponding predicted labels.
df = pd.DataFrame({"Id":df_test["Id"],"Predicted":pred})
df.to_csv('out2.csv', index=False)